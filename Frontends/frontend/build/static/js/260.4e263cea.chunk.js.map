{"version":3,"file":"static/js/260.4e263cea.chunk.js","mappings":"4PAgBaA,EAAU,WACrB,IAAAC,GAKIC,EAAAA,EAAAA,IAAkB,CACpBC,KAAM,WALNC,EAAQH,EAARG,SACaC,EAAMJ,EAAnBK,UAAaD,OACbE,EAAYN,EAAZM,aACAD,EAASL,EAATK,UAIFE,EACEC,EAAAA,UAAe,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GADhBI,EAAqBF,EAAA,GAAEG,EAAwBH,EAAA,GAEhDI,EAAU,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAOC,GAAc,IAAAC,EAAA,OAAAJ,EAAAA,EAAAA,KAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,GACjBC,EAAAA,EAAAA,IAAa,CAChCC,MAAOP,EAAKO,MACZC,QAASR,EAAKQ,QACdC,SAAU,OACVC,QAAS,IAAIC,OACZ,KAAD,EALIV,EAAME,EAAAS,KAMZnB,IAAyBQ,GAAuB,wBAAAE,EAAAU,OAAA,GAAAd,EAAA,KACjD,gBARee,GAAA,OAAAnB,EAAAoB,MAAA,KAAAC,UAAA,KAShB,OACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACX,MAAM,iBAAgBY,UAC1BC,EAAAA,EAAAA,MAAA,QAAMC,SAAUlC,EAAaO,GAAYyB,SAAA,EACvCC,EAAAA,EAAAA,MAACE,EAAAA,GAAQ,CAACC,SAAUrC,EAAUsC,cAAgBhC,EAAsB2B,SAAA,EAClEC,EAAAA,EAAAA,MAACK,EAAAA,GAAc,CAAAN,SAAA,EACbF,EAAAA,EAAAA,KAACS,EAAAA,GAAU,CAACC,QAAQ,QAAOR,SAAC,WAC5BF,EAAAA,EAAAA,KAACW,EAAAA,IAAUC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACJ7C,EAAS,QAAS,CACrB8C,UAAU,EACVC,UAAW,MACX,IACFC,GAAG,QACHC,KAAK,QACLC,KAAK,UAENjD,EAAOsB,OAA+B,aAAtBtB,EAAOsB,MAAM2B,OAC5BjB,EAAAA,EAAAA,KAACkB,EAAAA,GAAU,CAAAhB,SAAC,sCAEblC,EAAOsB,OAA+B,cAAtBtB,EAAOsB,MAAM2B,OAC5BjB,EAAAA,EAAAA,KAACkB,EAAAA,GAAU,CAAAhB,SAAC,iDAGhBC,EAAAA,EAAAA,MAACK,EAAAA,GAAc,CAAAN,SAAA,EACbF,EAAAA,EAAAA,KAACS,EAAAA,GAAU,CAACC,QAAQ,UAASR,SAAC,aAC9BF,EAAAA,EAAAA,KAACmB,EAAAA,GAAaP,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACP7C,EAAS,UAAW,CACvB8C,UAAU,EACVC,UAAW,MACX,IACFC,GAAG,UACHC,KAAK,aAENhD,EAAOuB,SAAmC,aAAxBvB,EAAOuB,QAAQ0B,OAChCjB,EAAAA,EAAAA,KAACkB,EAAAA,GAAU,CAAAhB,SAAC,wCAEblC,EAAOuB,SAAmC,cAAxBvB,EAAOuB,QAAQ0B,OAChCjB,EAAAA,EAAAA,KAACkB,EAAAA,GAAU,CAAAhB,SAAC,sDAMlBF,EAAAA,EAAAA,KAACoB,EAAAA,GAAmB,CAAAlB,UAClBF,EAAAA,EAAAA,KAACqB,EAAAA,GAAa,CAACJ,KAAK,SAAQf,SAAC,2BAE9B3B,IACCyB,EAAAA,EAAAA,KAACsB,EAAAA,GAAiB,CAAApB,SAAC,iDAO7B,EACA,W","sources":["AskPage.tsx"],"sourcesContent":["import { Page } from './Page';\nimport { postQuestion } from './QuestionsData';\nimport {\n  Fieldset,\n  FieldContainer,\n  FieldLabel,\n  FieldInput,\n  FieldTextArea,\n  FormButtonContainer,\n  PrimaryButton,\n  FieldError,\n  SubmissionSuccess,\n} from './Styles';\nimport { useForm } from 'react-hook-form';\nimport React from 'react';\n\nexport const AskPage = () => {\n  const {\n    register,\n    formState: { errors },\n    handleSubmit,\n    formState,\n  } = useForm<FormData>({\n    mode: 'onBlur',\n  });\n  const [successfullySubmitted, setSuccessfullySubmitted] =\n    React.useState(false);\n  const submitForm = async (data: FormData) => {\n    const result = await postQuestion({\n      title: data.title,\n      content: data.content,\n      userName: 'Fred',\n      created: new Date(),\n    });\n    setSuccessfullySubmitted(result ? true : false);\n  };\n  return (\n    <Page title=\"Ask a question\">\n      <form onSubmit={handleSubmit(submitForm)}>\n        <Fieldset disabled={formState.isSubmitting || successfullySubmitted}>\n          <FieldContainer>\n            <FieldLabel htmlFor=\"title\">Title</FieldLabel>\n            <FieldInput\n              {...(register('title', {\n                required: true,\n                minLength: 10,\n              }) as unknown as Record<string, any>)}\n              id=\"title\"\n              name=\"title\"\n              type=\"text\"\n            />\n            {errors.title && errors.title.type === 'required' && (\n              <FieldError>You must enter the question title</FieldError>\n            )}\n            {errors.title && errors.title.type === 'minLength' && (\n              <FieldError>The title must be at least 10 characters</FieldError>\n            )}\n          </FieldContainer>\n          <FieldContainer>\n            <FieldLabel htmlFor=\"content\">Content</FieldLabel>\n            <FieldTextArea\n              {...(register('content', {\n                required: true,\n                minLength: 50,\n              }) as unknown as Record<string, any>)}\n              id=\"content\"\n              name=\"content\"\n            />\n            {errors.content && errors.content.type === 'required' && (\n              <FieldError>You must enter the question content</FieldError>\n            )}\n            {errors.content && errors.content.type === 'minLength' && (\n              <FieldError>\n                The content must be at least 50 characters\n              </FieldError>\n            )}\n          </FieldContainer>\n        </Fieldset>\n        <FormButtonContainer>\n          <PrimaryButton type=\"submit\">Submit Your Question</PrimaryButton>\n        </FormButtonContainer>\n        {successfullySubmitted && (\n          <SubmissionSuccess>\n            Your question was successfully submitted\n          </SubmissionSuccess>\n        )}\n      </form>\n    </Page>\n  );\n};\nexport default AskPage;\n\ntype FormData = {\n  title: string;\n  content: string;\n};\n"],"names":["AskPage","_useForm","useForm","mode","register","errors","formState","handleSubmit","_React$useState","React","_React$useState2","_slicedToArray","successfullySubmitted","setSuccessfullySubmitted","submitForm","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","result","wrap","_context","prev","next","postQuestion","title","content","userName","created","Date","sent","stop","_x","apply","arguments","_jsx","Page","children","_jsxs","onSubmit","Fieldset","disabled","isSubmitting","FieldContainer","FieldLabel","htmlFor","FieldInput","_objectSpread","required","minLength","id","name","type","FieldError","FieldTextArea","FormButtonContainer","PrimaryButton","SubmissionSuccess"],"sourceRoot":""}